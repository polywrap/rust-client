/**
 * This file was automatically generated by templates/versions.hbs.
 * DO NOT MODIFY IT BY HAND. Instead, modify templates/versions.hbs,
 * and run build script to regenerate this file.
 */

use serde_json::Value;
use serde::{Serialize, Deserialize};
use polywrap_schemafy::schemafy;
use crate::utils::sanitize_semver_version;
use crate::error::Error;

schemafy!(
  root: WrapManifest01
  "schemas/0.1.json"
);


#[derive(Clone)]
pub enum AnyManifest {
  WrapManifest01(WrapManifest01),
}

impl AnyManifest {
  pub fn version(&self) -> String {
    match self {
      AnyManifest::WrapManifest01(_) => sanitize_semver_version("0.1"),
    }
  }

    pub fn from_json_value(value: Value) -> Result<Self, Error> {
        match value["version"].as_str().unwrap() {
            "0.1" => Ok(AnyManifest::WrapManifest01(serde_json::from_value(value)?)),
            v => Err(Error::FromJSONError(format!("Invalid manifest version: {v}"))),
        }
    }

    pub fn to_json_value(&self) -> Result<Value, Error> {
        match self {
            AnyManifest::WrapManifest01(manifest) => Ok(serde_json::to_value(manifest)?),
        }
    }

    pub fn get_latest_version() -> String {
        sanitize_semver_version("0.1")
    }
}

pub type WrapManifest = WrapManifest01;
pub type WrapManifestAbi = WrapManifest01Abi;
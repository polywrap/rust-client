[Error]
interface FFIError {
  UriParseError(string err);
  RedirectsError(string err, record<DOMString, string> resolution_stack);
  WrapperError(string err);
  WrapperCreateError(string err);
  InvokeError(string uri, string method, string err);
  LoadWrapperError(string uri, string err);
  WasmWrapperError(string err);
  ResolutionError(string err);
  UriNotFoundError(string uri);
  MsgpackError(string err);
  ManifestError(string err);
  FileReadError(string err);
  ResolverError(string err);
  PluginError(string err);
  RuntimeError(string err);
  OtherError(string err);
};

interface FFIUri {
  constructor([ByRef] string authority, [ByRef] string path, [ByRef] string uri);

  string authority();
  string path();
  string to_string_uri();
};

interface FFIInvoker {
  [Throws=FFIError]
  sequence<u8> invoke_raw(FFIUri uri, string method, sequence<u8>? args, sequence<u8>? env, FFIUriResolutionContext? resolution_context);

  [Throws=FFIError]
  sequence<FFIUri> get_implementations(FFIUri uri);

  record<DOMString, sequence<FFIUri>>? get_interfaces();

  sequence<u8>? get_env_by_uri(FFIUri uri);
};

callback interface IFFIWrapper {
  [Throws=FFIError]
  sequence<u8> invoke([ByRef] string method, sequence<u8>? args, sequence<u8>? env, FFIInvoker invoker);
};

interface FFIWrapper {
  constructor(IFFIWrapper wrapper);

  [Throws=FFIError]
  sequence<u8> invoke([ByRef] string method, sequence<u8>? args, sequence<u8>? env, FFIInvoker invoker);
};

callback interface IFFIWrapPackage {
  [Throws=FFIError]
  IFFIWrapper create_wrapper();
};

interface FFIWrapPackage {
  [Throws=FFIError]
  FFIWrapper create_wrapper();
};

interface FFICompiledWasmModule {
  [Throws=FFIError]
  FFISerializedWasmModule serialize();
};

interface FFISerializedWasmModule {
  [Throws=FFIError]
  FFICompiledWasmModule deserialize();
};

interface FFIWasmWrapper {
  constructor(FFICompiledWasmModule compiled_wasm_module);

  [Throws=FFIError]
  sequence<u8> invoke([ByRef] string method, sequence<u8>? args, sequence<u8>? env, FFIInvoker invoker);
};

callback interface IFFIUriResolver {
  [Throws=FFIError]
  FFIUriPackageOrWrapper try_resolve_uri(FFIUri uri, FFIInvoker invoker, FFIUriResolutionContext resolution_context);
};

interface FFIUriResolver {
  [Throws=FFIError]
  FFIUriPackageOrWrapper try_resolve_uri(FFIUri uri, FFIInvoker invoker, FFIUriResolutionContext resolution_context);
};

interface FFIWasmPackage {
  [Throws=FFIError]
  FFIWasmWrapper create_wrapper();
};

enum FFIUriPackageOrWrapperKind {
  "URI",
  "PACKAGE",
  "WRAPPER",
};

dictionary FFIUriWrapper {
  FFIUri uri;
  FFIWrapper wrapper;
};

dictionary FFIUriWrapPackage {
  FFIUri uri;
  IFFIWrapPackage package;
};

interface FFIUriPackageOrWrapper {
  FFIUriPackageOrWrapperKind get_kind();
  [Throws=FFIError]
  FFIUri as_uri();
  [Throws=FFIError]
  FFIUriWrapper as_wrapper();
  [Throws=FFIError]
  FFIUriWrapPackage as_package();
};

interface FFIStaticUriResolver {
  [Throws=FFIError]
  constructor(record<DOMString, FFIUriPackageOrWrapper> uri_map);
  [Throws=FFIError]
  FFIUriPackageOrWrapper try_resolve_uri(FFIUri uri, FFIInvoker invoker, FFIUriResolutionContext resolution_context);
};

interface FFIRecursiveUriResolver {
  constructor(FFIUriResolver uri_resolver);
  [Throws=FFIError]
  FFIUriPackageOrWrapper try_resolve_uri(FFIUri uri, FFIInvoker invoker, FFIUriResolutionContext resolution_context);
};

dictionary FFIUriResolutionStep {
  FFIUri source_uri;
  FFIUriPackageOrWrapper result;
  string? description;
  sequence<FFIUriResolutionStep>? sub_history;
};

interface FFIUriResolutionContext {
  constructor();
  void set_resolution_path(sequence<string> resolution_path);
  void set_history(sequence<FFIUriResolutionStep> history);
  void set_resolving_uri_map(record<DOMString, boolean> resolving_uri_map);
  void set_start_resolving(FFIUri uri);
  void set_stop_resolving(FFIUri uri);
  void track_step(FFIUriResolutionStep step);
  sequence<FFIUriResolutionStep> get_history();
  sequence<FFIUri> get_resolution_path();
  FFIUriResolutionContext create_sub_history_context();
  FFIUriResolutionContext create_sub_context();
};

interface FFIClient {
  [Throws=FFIError]
  sequence<u8> invoke_raw(FFIUri uri, [ByRef] string method, sequence<u8>? args, sequence<u8>? env, FFIUriResolutionContext? resolution_context);

  [Throws=FFIError]
  sequence<FFIUri> get_implementations(FFIUri uri);

  record<DOMString, sequence<FFIUri>>? get_interfaces();

  sequence<u8>? get_env_by_uri(FFIUri uri);

  FFIInvoker as_invoker();

  [Throws=FFIError]
  sequence<u8> invoke_wrapper_raw(FFIWrapper wrapper, FFIUri uri, [ByRef] string method, sequence<u8>? args, sequence<u8>? env, FFIUriResolutionContext? resolution_context);

  [Throws=FFIError]
  FFIWrapper load_wrapper(FFIUri uri, FFIUriResolutionContext? resolution_context);

  [Throws=FFIError]
  FFIUriPackageOrWrapper try_resolve_uri(FFIUri uri, FFIUriResolutionContext? resolution_context);
};

interface FFIBuilderConfig {
  constructor();
  record<DOMString, sequence<FFIUri>>? get_interfaces();
  record<DOMString, sequence<u8>>? get_envs();
  sequence<FFIUriWrapper>? get_wrappers();
  sequence<FFIUriWrapPackage>? get_packages();
  record<DOMString, FFIUri>? get_redirects();
  sequence<FFIUriResolver>? get_resolvers();
  void add_env(FFIUri uri, sequence<u8> env);
  void remove_env(FFIUri uri);
  void add_interface_implementations(FFIUri interface_uri, sequence<FFIUri> implementation_uris);
  void add_interface_implementation(FFIUri interface_uri, FFIUri implementation_uri);
  void remove_interface_implementation(FFIUri interface_uri, FFIUri implementation_uri);
  void add_wrapper(FFIUri uri, FFIWrapper wrapper);
  void remove_wrapper(FFIUri uri);
  void add_package(FFIUri uri, FFIWrapPackage package);
  void remove_package(FFIUri uri);
  void add_redirect(FFIUri from, FFIUri to);
  void remove_redirect(FFIUri from);
  void add_resolver(FFIUriResolver resolver);
  void add_system_defaults();
  void add_web3_defaults();
  FFIClient build();
};

namespace polywrap_native {
  [Throws=FFIError]
  FFIUri ffi_uri_from_string([ByRef] string uri);

  [Throws=FFIError]
  FFIWasmWrapper ffi_wasm_wrapper_from_bytecode([ByRef] sequence<u8> bytes);

  [Throws=FFIError]
  FFICompiledWasmModule ffi_compiled_wasm_module_from_bytecode([ByRef] sequence<u8> bytes);

  [Throws=FFIError]
  FFIWasmPackage ffi_wasm_package_from_bytecode([ByRef] sequence<u8> bytes);

  [Throws=FFIError]
  FFIWasmPackage ffi_wasm_package_from_serialized_module(FFISerializedWasmModule serialized_module, [ByRef] sequence<u8> bytes);
  
  [Throws=FFIError]
  FFIWasmPackage ffi_wasm_package_from_compiled_wasm_module(FFICompiledWasmModule compiled_module, [ByRef] sequence<u8> bytes);
};